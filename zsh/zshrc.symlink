export ZSH=$DOTFILES/zsh

if [[ -d $DOTFILES/zsh/functions ]]; then
   for func in $DOTFILES/zsh/functions/*(:t); autoload -U $func
fi

########################################################
# Configuration
########################################################

COLOR_BLACK="\e[0;30m"
COLOR_BLUE="\e[0;34m"
COLOR_GREEN="\e[0;32m"
COLOR_CYAN="\e[0;36m"
COLOR_PINK="\e[0;35m"
COLOR_RED="\e[0;31m"
COLOR_PURPLE="\e[0;35m"
COLOR_BROWN="\e[0;33m"
COLOR_LIGHTGRAY="\e[0;37m"
COLOR_DARKGRAY="\e[1;30m"
COLOR_LIGHTBLUE="\e[1;34m"
COLOR_LIGHTGREEN="\e[1;32m"
COLOR_LIGHTCYAN="\e[1;36m"
COLOR_LIGHTRED="\e[1;31m"
COLOR_LIGHTPURPLE="\e[1;35m"
COLOR_YELLOW="\e[1;33m"
COLOR_WHITE="\e[1;37m"
COLOR_NONE="\e[0m"

# if [ -z "$TMUX" ]; then
#     export TERM=xterm-256color-italic
# else
#     export TERM=tmux-256color
# fi


# initialize autocomplete
autoload -U compinit add-zsh-hook
compinit

prepend_path $DOTFILES/bin
prepend_path $HOME/bin
prepend_path $HOME/.local/bin
prepend_path $HOME/software/bin/bin

# display how long all tasks over 10 seconds take
export REPORTTIME=10

setopt NO_BG_NICE
setopt NO_AUTO_MENU
setopt NO_HUP
setopt NO_LIST_BEEP
setopt LOCAL_OPTIONS
setopt LOCAL_TRAPS
setopt PROMPT_SUBST
setopt GLOB_STAR_SHORT
setopt NUMERIC_GLOB_SORT

# history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY
setopt HIST_REDUCE_BLANKS
setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_EXPIRE_DUPS_FIRST

up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-history
    zle set-local-history 0
}
zle -N up-line-or-local-history
down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-history
    zle set-local-history 0
}
zle -N down-line-or-local-history
#
# Up/Down keys only search through local history
bindkey "${key[Up]}" up-line-or-local-history
bindkey "${key[Down]}" down-line-or-local-history


setopt COMPLETE_ALIASES

# make terminal command navigation sane again
set -o emacs
# Putty
if  [[ $TERM == "xterm"* ]]; then
    bindkey "^[OC" forward-word                      # [Ctrl-right] - forward one word
    bindkey "^[OD" backward-word                     # [Ctrl-left] - backward one word
    bindkey "^[^[[D" beginning-of-line                  # [Alt-left] - beginning of line
    bindkey "^[^[[C"  end-of-line                       # [Alt-right] - end of line
else
# Putty+tmux compatibility
    bindkey "^[[1;5C" forward-word                      # [Ctrl-right] - forward one word
    bindkey "^[[1;5D" backward-word                     # [Ctrl-left] - backward one word
	# Doesn't work in tmux  ¯\_(ツ)_/¯
    bindkey "^[^[[D" beginning-of-line                  # [Alt-left] - beginning of line
    bindkey "^[^[[C" end-of-line                       # [Alt-right] - end of line
fi
# Other (not yet fully figured out)
#bindkey '^[^[[C' forward-word                       # [Ctrl-right] - forward one word
#bindkey '^[^[[D' backward-word                      # [Ctrl-left] - backward one word
# bindkey '^[[1;3D' beginning-of-line                 # [Alt-left] - beginning of line
# bindkey '^[[1;3C' end-of-line                       # [Alt-right] - end of line
# bindkey '^[[5D' beginning-of-line                   # [Alt-left] - beginning of line
# bindkey '^[[5C' end-of-line                         # [Alt-right] - end of line
# bindkey '^?' backward-delete-char                   # [Backspace] - delete backward
#
if [[ "${terminfo[kdch1]}" != "" ]]; then
    bindkey "${terminfo[kdch1]}" delete-char        # [Delete] - delete forward
else
    bindkey "^[[3~" delete-char                     # [Delete] - delete forward
    bindkey "^[3;5~" delete-char
    bindkey "\e[3~" delete-char
fi

# bindkey "^A" vi-beginning-of-line
# bindkey -M viins "^F" vi-forward-word               # [Ctrl-f] - move to next word
# bindkey -M viins "^E" vi-add-eol                    # [Ctrl-e] - move to end of line
# bindkey "^J" history-beginning-search-forward
# bindkey "^K" history-beginning-search-backward

# matches case insensitive for lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# pasting with tabs doesn't perform completion
zstyle ':completion:*' insert-tab pending

# default to file completion
zstyle ':completion:*' completer _expand _complete _files

# complete ..<TAB> to ../ (see https://stackoverflow.com/questions/564648/zsh-tab-completion-for-cd)
zstyle ':completion:*' special-dirs true

# source all .zsh files inside of the zsh/ directory
source "$DOTFILES/zsh/utils.zsh"
source "$DOTFILES/zsh/prompt.zsh"


########################################################
# Plugin setup
########################################################

export ZPLUGDIR="$CACHEDIR/zsh/plugins"
[[ -d "$ZPLUGDIR" ]] || mkdir -p "$ZPLUGDIR"
# array containing plugin information (managed by zfetch)
typeset -A plugins

# zfetch $ZPLUGDIR zsh-users/zsh-syntax-highlighting
# zfetch $ZPLUGDIR zsh-users/zsh-autosuggestions
# zfetch $ZPLUGDIR chriskempson/base16-shell

# # add fnm
# eval "`fnm env --multi --use-on-cd`"


[[ -e ~/.terminfo ]] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo

############################kk############################
# Setup
########################################################

# add a config file for ripgrep
# export RIPGREP_CONFIG_PATH="$HOME/.rgrc"

[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh
# export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
if which fd >/dev/null; then 
  export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
else
  export FZF_DEFAULT_COMMAND="find . -type f -not -path '*/\.git/*'"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

## move to next word with ctrl-F
#bindkey -M viins "^F" vi-forward-word
## Move to end of line with ctrl-E
#bindkey -M viins "^E" vi-add-eol

# add color to man pages
export MANROFFOPT='-c'
export LESS_TERMCAP_mb=$(tput bold; tput setaf 2)
export LESS_TERMCAP_md=$(tput bold; tput setaf 6)
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4)
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7)
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)

# Add module system
if [ -f /usr/share/modules/init/zsh ]; then
	source /usr/share/modules/init/zsh 
	source "$DOTFILES/zsh/module_complete.zsh"
fi

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export WORKON_HOME=$HOME/.local/virtualenvs
export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv
if [ -f $HOME/.local/bin/virtualenvwrapper.sh ]; then
    source $HOME/.local/bin/virtualenvwrapper.sh
fi

########################################################
# Aliases
########################################################

# reload zsh config
alias reload!='RELOAD=1 source ~/.zshrc'

colorflag="--color"

# use nvim, but don't make me think about it
alias vim="nvim"

# Filesystem aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias ls="ls --color"
alias l="ls -lah --color"
alias la="ls -AF --color"
alias ll="ls -lFh --color"
alias lld="ls -l | grep ^d"
alias rmf="rm -rf"

# Helpers
alias grep='grep --color=auto'
alias df='df -h' # disk free, in Gigabytes, not bytes
alias du='du -h -c' # calculate disk usage for a folder
alias wr='wcgrep -r'

# git aliases
alias gs='git s'
alias glog="git l"

# tmux aliases
alias ta='tmux attach'
alias tls='tmux ls'
alias tat='tmux attach -t'
alias tns='tmux new-session -s'
alias modav='module av 2>&1 | less'  
# fnm
# eval "$(fnm env --multi)"
